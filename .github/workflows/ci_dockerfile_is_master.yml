# The beauty of this CI setup is that it will build any valid DOCKERFILE by setting a few variables.
# See how at https://github.com/firepress-org/rclone-in-docker/blob/master/README-CI.md
# Requires secrets on github: DOCKERHUB_PASSWORD, TOKEN_SLACK, TOKEN_GPR
# Update DOCKERFILE_NAME if you are using a special Dockerfile name
# The way we define variables is a hack. See why: https://bit.ly/2ZEAt6u
#
# GNU v3 | Please credit the author if you are re-using some of it :-p
# by Pascal Andy | https://pascalandy.com/blog/now/

name: ci_dockerfile_master
on:
  schedule:
    - cron: '0 8 * * *'
  push:
    branches:
      - master

jobs:

  Job1:
    name: Job 1 of 3
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          # Two hard coded variables. Don't forget to set line 135 in Job2
          echo "Dockerfile" > DOCKERFILE_NAME
          # Does BRANCH_TYPE is for "stable" or "edge"?
          echo "stable" > BRANCH_TYPE
          #
          # Logically defined variable from the Dockerfile
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_ORG
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_REGISTRY
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME):$(cat BRANCH_TYPE)" > DKR_URL
          echo "docker.pkg.github.com/$(cat GITHUB_ORG)/$(cat GITHUB_REGISTRY)/$(cat APP_NAME):$(cat BRANCH_TYPE)" > GPR_URL
          date -d "-4 hours" "+%Y-%m-%d_%HH%Ms%S" > DATE_TIME
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          #
          # Define tags for Docker Hub
          echo "$(cat DKR_URL)"                                                           > TAG_TYPE
          echo "$(cat DKR_URL)_$(cat VERSION)"                                            > TAG_TYPE_VERSION
          echo "$(cat DKR_URL)_$(cat VERSION)_$(cat SHORT_COMMIT_HASH)"                   > TAG_TYPE_VERSION_HASH
          echo "$(cat DKR_URL)_$(cat VERSION)_$(cat SHORT_COMMIT_HASH)_$(cat DATE_TIME)"  > TAG_TYPE_VERSION_HASH_HOUR
          #
          # Define tags for GPR (Github Package Registry)
          echo "$(cat GPR_URL)"                                                           > TAG_TYPE_GPR
          echo "$(cat GPR_URL)_$(cat VERSION)"                                            > TAG_TYPE_VERSION_GPR
          echo "$(cat GPR_URL)_$(cat VERSION)_$(cat SHORT_COMMIT_HASH)"                   > TAG_TYPE_VERSION_HASH_GPR
          echo "$(cat GPR_URL)_$(cat VERSION)_$(cat SHORT_COMMIT_HASH)_$(cat DATE_TIME)"  > TAG_TYPE_VERSION_HASH_HOUR_GPR

      - name: Build
        run: |
          # for Docker hub
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION_HASH) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION_HASH_HOUR) .
          # for GPR
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_GPR) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION_GPR) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION_HASH_GPR) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_TYPE_VERSION_HASH_HOUR_GPR) .

      - name: Test image with docker-library
        run: |
          git clone --depth 1 https://github.com/docker-library/official-images.git official-images
          # override config.sh. Why: 1) UTC timezone 2) ghost-basic is configure to check the commit between the image of the official docker image of Ghost.
          cp ./test/config.sh official-images/test/config.sh
          official-images/test/run.sh $(cat TAG_TYPE)

      - name: Logs / All tags & variables
        run: |
          echo "Check out https://hub.docker.com/r/$(cat DOCKERHUB_USER)/$(cat APP_NAME)/tags?page=1&ordering=last_updated"
          echo " "
          echo "$(cat TAG_TYPE_VERSION_HASH_HOUR) < TAG_TYPE_VERSION_HASH_HOUR"
          echo "$(cat TAG_TYPE_VERSION_HASH) < TAG_TYPE_VERSION_HASH"
          echo "$(cat TAG_TYPE_VERSION) < TAG_TYPE_VERSION"
          echo "$(cat TAG_TYPE) < TAG_TYPE"
          echo " "
          echo "$(cat TAG_TYPE_VERSION_HASH_HOUR_GPR) < TAG_TYPE_VERSION_HASH_HOUR_GPR"
          echo "$(cat TAG_TYPE_VERSION_HASH_GPR) < TAG_TYPE_VERSION_HASH_GPR"
          echo "$(cat TAG_TYPE_VERSION_GPR) < TAG_TYPE_VERSION_GPR"
          echo "$(cat TAG_TYPE_GPR) < TAG_TYPE_GPR"
          echo " "
          echo "$(cat APP_NAME) < APP_NAME"
          echo "$(cat VERSION) < VERSION"
          echo "$(cat DOCKERFILE_NAME) < DOCKERFILE_NAME"
          echo " "
          echo "$(cat DATE_TIME) < DATE_TIME"
          echo "$(cat SHORT_COMMIT_HASH) < SHORT_COMMIT_HASH"
          echo "$(cat DOCKERHUB_USER) < DOCKERHUB_USER"
          echo "$(cat GITHUB_ORG) < GITHUB_ORG"
          echo "$(cat DKR_URL) < DKR_URL"
          echo "$(cat GPR_URL) < GPR_URL"
          echo "$(cat GITHUB_REGISTRY) < GITHUB_REGISTRY"

      - name: Logs / docker (inspect, history, version, info), uname
        run: |
          docker inspect $(cat TAG_TYPE)
          docker history $(cat TAG_TYPE) --no-trunc
          docker version
          docker info
          uname -a

      - name: Publish to Dockerhub
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username $(cat DOCKERHUB_USER) --password-stdin
          docker push $(cat TAG_TYPE_VERSION_HASH_HOUR)
          docker push $(cat TAG_TYPE)
          docker push $(cat TAG_TYPE_VERSION)
          docker push $(cat TAG_TYPE_VERSION_HASH)

      - name: Publish to GPR
        if: always()
        run: |
          echo ${{ secrets.TOKEN_GPR }} | docker login docker.pkg.github.com --username $(cat GITHUB_ORG) --password-stdin
          docker push $(cat TAG_TYPE_VERSION_HASH_HOUR_GPR)
          docker push $(cat TAG_TYPE_GPR)
          docker push $(cat TAG_TYPE_VERSION_GPR)
          docker push $(cat TAG_TYPE_VERSION_HASH_GPR)

  # triggered for branches "edge" and "stable"
  Job2:
    needs: job1
    name: Job 2 of 3
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          # One hard coded variables
          echo "stable" > BRANCH_TYPE
          #
          echo "Dockerfile" > DOCKERFILE_NAME
          echo "devmtl/noti:stable" > IMG_NOTI
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          echo "$(cat APP_NAME):$(cat VERSION) / $(cat SHORT_COMMIT_HASH)" > NOTI_MESSAGE
          # Tags are logically defined (needed by Aquasec microscanner)
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DKR_URL
          echo "$(cat DKR_URL):$(cat BRANCH_TYPE)" > TAG_SCANNER

      - name: Notify on Slack
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE="$(cat NOTI_MESSAGE)" \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            $(cat IMG_NOTI) sh -c \
              ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
                NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
                noti -k -m "$NOTI_MESSAGE" '

  # triggered only for branch "stable"
  Job3:
    needs: job1
    name: Job 3 of 3
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          # One hard coded variables
          echo "stable" > BRANCH_TYPE
          #
          echo "Dockerfile" > DOCKERFILE_NAME
          echo "devmtl/noti:stable" > IMG_NOTI
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          echo "$(cat APP_NAME):$(cat VERSION) / $(cat SHORT_COMMIT_HASH)" > NOTI_MESSAGE
          # Tags are logically defined (needed by Aquasec microscanner)
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DKR_URL
          echo "$(cat DKR_URL):$(cat BRANCH_TYPE)" > TAG_SCANNER

      - name: Push README to Docker hub description
        run: |
          docker run --rm \
            -v $(pwd)/README.md:/data/README.md \
            -e DOCKERHUB_USERNAME=$(cat DOCKERHUB_USER) \
            -e DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }} \
            -e DOCKERHUB_REPO_PREFIX=$(cat DOCKERHUB_USER) \
            -e DOCKERHUB_REPO_NAME=$(cat APP_NAME) \
            devmtl/readme-to-dockerhub:stable

      - name: Test image with Aquasec microscanner
        run: |
          wget --retry-connrefused --waitretry=1 --read-timeout=5 --timeout=5 --tries=10 \
            https://raw.githubusercontent.com/lukebond/microscanner-wrapper/master/scan.sh && chmod +x scan.sh
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest \
            --exit-code 0 $(cat TAG_SCANNER)

      #- name: Github Actions ideas to implements
      #  run: |
      #    echo "see —> https://gist.github.com/pascalandy/4e499b7c42023836a7d207277923fc09"
