sudo: required
language: bash

services:
  - docker

env:
  matrix:
    - ARCH=arm
    - ARCH=arm64
    - ARCH=amd64

branches:
  only:
  - master
  - edge

addons:
  apt:
    packages:

cache:
  directories:
    - $HOME/.cache/trivy

before_install:
  - sudo apt-get -qq update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - sudo apt-get install --no-install-recommends -qqy openssl parallel ca-certificates
  - docker --version

before_script:
  - GHOST_VERSION_DOCKERFILE="$(cat Dockerfile | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g')"
  - GHOST_LATEST_RELEASE="$(git ls-remote --tags https://github.com/TryGhost/Ghost.git | cut -d$'\t' -f2 | grep -E '^refs/tags/[0-9]+\.[0-9]+' | cut -d/ -f3 | sort -rV | head -n1)"
  - GHOST_CLI_LATEST_RELEASE="$(git ls-remote --tags https://github.com/TryGhost/Ghost-CLI.git | cut -d$'\t' -f2 | grep -E '^refs/tags/[0-9]+\.[0-9]+' | cut -d/ -f3 | sort -rV | head -n1)"
  - VERSION=${GHOST_VERSION_DOCKERFILE}

  - DOCKER_USERNAME="devmtl"
  - DOCKER_REPO_NAME="ghostfire"
  - CONTAINER_NAME="ghostuat"

  - THIS_DATE=$(date +%Y-%m-%d)
  - THIS_SHA_SHORT=$(git rev-parse --short HEAD)

  - IMAGE_SHA_SHORT=${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:${VERSION}-${THIS_SHA_SHORT}
  - IMAGE_VERSION=${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:${VERSION}
  - IMAGE_STABLE=${DOCKER_USERNAME}/${DOCKER_REPO_NAME}:stable

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "Install microscanner Aquasec Scanner"
  - wget --retry-connrefused --waitretry=1 --read-timeout=5 --timeout=5 --tries=10 https://raw.githubusercontent.com/lukebond/microscanner-wrapper/master/scan.sh && chmod +x scan.sh

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "Install officiel docker tests"
  - git clone https://github.com/docker-library/official-images.git ~/official-images
  - echo "Bypass timezone test "utc" as we use America/New_York timezone in our image"
  - sed -i "/utc/d" ~/official-images/test/config.sh

script:
  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "CMD uname -a / unit test"
  - uname -a

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "Build and run"
  - docker build -t ${IMAGE_SHA_SHORT} .
  - docker run -d --name ${CONTAINER_NAME} -p 2368:2368 -e url=http://localhost:2368 -e NODE_ENV=production ${IMAGE_SHA_SHORT}

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - docker inspect ${CONTAINER_NAME};

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - docker images;

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - docker logs ${CONTAINER_NAME};

after_script:
  - echo && echo && echo && echo
  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - message_is="starting unit tests"
  - docker run --rm devmtl/figlet:1.0 ${message_is} && echo;
  - echo "< = = = = = = = = = = = = = = = = = = = = = >" && echo;

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "A) Ensure ${CONTAINER_NAME} is running normally / unit test"
  - until $(curl --output /dev/null --silent --head --fail http://localhost:2368); do
      echo & echo && echo "Waiting for ${CONTAINER_NAME} container to run  ==========>";
      sleep 2;
    done
  - curl http://localhost:2368 | grep "The professional publishing platform"

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "B) Official docker on the image / unit test"
  - ~/official-images/test/run.sh "$IMAGE_SHA_SHORT"

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "C) Docker exec / unit test"
  - docker exec -it ${CONTAINER_NAME} uname -a;
  - docker exec -it ${CONTAINER_NAME} node --version;
  - docker exec -it ${CONTAINER_NAME} cat /var/lib/ghost/current/content/themes/casper/package.json | grep version;
  - docker exec -it ${CONTAINER_NAME} cat /var/lib/ghost/current/package.json | grep version;
  - docker exec -it ${CONTAINER_NAME} curl -Is --head "http://localhost:2368" | grep -F -o "HTTP/1.1 200 OK" || echo "Error --> http://localhost:2368";

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "D) Trivy scanner for Containers / unit test"
  - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock knqyf263/trivy:latest -q -d --exit-code 1 ${IMAGE_SHA_SHORT}

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "E) MicroScanner scanner from Aqua Security / unit test"
  - MICROSCANNER_TOKEN=${MICROSCANNER_TOKEN} ./scan.sh ${IMAGE_SHA_SHORT}

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - echo "F) Remove container / unit test"
  - docker rm -f ${CONTAINER_NAME};

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - message_is="ending unit tests"
  - docker run --rm devmtl/figlet:1.0 ${message_is} && echo;
  - echo "< = = = = = = = = = = = = = = = = = = = = = >" && echo;

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - message_is="Push to Docker Hub"
  - docker run --rm devmtl/figlet:1.0 ${message_is} && echo;
  - echo "< = = = = = = = = = = = = = = = = = = = = = >" && echo;
  - if [ ${TRAVIS_BRANCH} == "master" ] && [ ${DOCKER_REPO_NAME} != "" ] && [ ${DOCKER_USERNAME} != "" ] && [ ${DOCKER_PASSWORD} != "" ]; then
      echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin;

      docker push ${IMAGE_SHA_SHORT};

      docker build -t ${IMAGE_VERSION} . ;
      docker push ${IMAGE_VERSION};

      docker build -t ${IMAGE_STABLE} .;
      docker push "$IMAGE_STABLE";

      docker build -t ${IMAGE_NODE_COMPRESS} --target node-compress . ;
      docker push "${IMAGE_NODE_COMPRESS}";

      docker build -t ${IMAGE_NODE_CORE} --target node-core . ;
      docker push "${IMAGE_NODE_CORE}";

      docker build -t ${IMAGE_GHOST_BASE} --target ghost-base . ;
      docker push "${IMAGE_GHOST_BASE}";
    fi

  - echo && echo && echo && echo "< = = = = = = = = = = = = = = = = = = = = = >"
  - message_is="Our Tags"
  - docker run --rm devmtl/figlet:1.0 ${message_is} && echo;
  - echo && echo GHOST_VERSION_DOCKERFILE=${GHOST_VERSION_DOCKERFILE} && echo GHOST_LATEST_RELEASE=${GHOST_LATEST_RELEASE} && echo GHOST_CLI_LATEST_RELEASE=${GHOST_CLI_LATEST_RELEASE} && echo GHOST=${GHOST} && echo && echo IMAGE_SHA_SHORT=${IMAGE_SHA_SHORT} && echo IMAGE_VERSION=${IMAGE_VERSION} && echo IMAGE_STABLE=${IMAGE_STABLE} && echo && echo "#IMAGE_SHA_SHORT=${IMAGE_SHA_SHORT}" && echo "#IMAGE_VERSION=${IMAGE_VERSION}" && echo "#IMAGE_STABLE=${IMAGE_STABLE}" && echo;

after_success:
  - echo "null"