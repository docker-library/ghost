# The beauty of our CI setup is that it will build a Dockerfile by setting a few variables
# See how at https://github.com/firepress-org/rclone-in-docker/blob/master/README-CI.md
#
# Requires secrets on github: secrets.DOCKERHUB_PASSWORD, secrets.TOKEN_SLACK, secrets.TOKEN_GPR
# All details: https://github.com/firepress-org/ghostfire/issues/23
#
# GNU v3 | Please credit the author if you are re-using some of it :-p 
# by Pascal Andy | https://pascalandy.com/blog/now/

name: build

on:
  push:
  pull_request:
    branches:
      - 'master'
      - 'edge'
      - 'dev'
      - 'wip'
      - 'pr'

  schedule:
    - cron: '0 8 * * *'

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  build:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set variables when branch equal master
        if: github.ref == 'refs/heads/master'
        run: |
          echo "BRANCH_NAME=stable" >> $GITHUB_ENV
      -
        name: Set variables when branch equal edge
        if: github.ref == 'refs/heads/edge'
        run: |
          echo "BRANCH_NAME=edge" >> $GITHUB_ENV
      -
        name: Set variables | hardcoded
        run: |
          echo "DOCKERFILE_NAME=Dockerfile" >> $GITHUB_ENV
          echo "IMG_NOTI=devmtl/noti:stable" >> $GITHUB_ENV
      -
        name: Set variables | dynamically part#1
        run: |
          echo "APP_NAME=$(cat ${{ env.DOCKERFILE_NAME }} | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ${{ env.DOCKERFILE_NAME }} | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ${{ env.DOCKERFILE_NAME }} | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ${{ env.DOCKERFILE_NAME }} | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          #
          echo "VERSION=$(cat ${{ env.DOCKERFILE_NAME }} | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "SHORT_HASH_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -d "-4 hours" "+%Y-%m-%d_%HH%Ms%S")" >> $GITHUB_ENV
      -
        name: Set variables | dynamically part#2
        run: |
          echo "VERSION_CI=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_ci_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
          echo "VERSION_BRANCH=${{ env.BRANCH_NAME }}_${{ env.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
          echo "VERSION_HASH_DATE=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}_${{ env.DATE }}" >> $GITHUB_ENV
          echo "DKR_PREFIX=${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}" >> $GITHUB_ENV
          echo "GPR_PREFIX=${{ env.GITHUB_ORG }}/${{ env.GITHUB_REGISTRY }}/${{ env.APP_NAME }}" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=${{ env.APP_NAME }}:${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
      - 
        name: Show variables
        run: |
          echo "${{ env.VERSION_HASH_DATE }} < VERSION_HASH_DATE"
          echo "${{ env.VERSION_HASH_ONLY }} < VERSION_HASH_ONLY"
          echo "${{ env.VERSION_BRANCH }} < VERSION_BRANCH"
          echo "${{ env.VERSION_CI }} < VERSION_CI"
          echo "${{ env.VERSION }} < VERSION"
          echo "${{ env.BRANCH_NAME }} < BRANCH_NAME"
          echo "${{ env._NOTI_MESSAGE }} < _NOTI_MESSAGE"
          echo "${{ env.DKR_PREFIX }} < DKR_PREFIX"
          echo "${{ env.GPR_PREFIX }} < GPR_PREFIX"
          echo "${{ env.SHORT_HASH_COMMIT }} < SHORT_HASH_COMMIT"
          echo "${{ env.DOCKERFILE_NAME }} < DOCKERFILE_NAME"
          echo "${{ env.DOCKERHUB_USER }} < DOCKERHUB_USER"
          echo "${{ env.APP_NAME }} < APP_NAME"
          echo "${{ env.GITHUB_ORG }} < GITHUB_ORG"
          echo "${{ env.GITHUB_REGISTRY }} < GITHUB_REGISTRY"
      - 
        name: Set QEMU for Multi-platform builds
        uses: docker/setup-qemu-action@v1
      - 
        name: Set Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: "--debug"
      -
        name: Set cache Docker layers
        id: docker-cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: Set authentification to DockerHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - 
        name: Set authentification to GitHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_ORG }}
          password: ${{ secrets.TOKEN_GPR }}
      -
        name: buildx and push | tag <VERSION_HASH_DATE> on linux/amd64
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE_NAME }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        name: Unit test Ghost
        run: |
          docker run -d --name blogtest -p 2368:2368 -e WEB_URL=http://localhost:2368 -e NODE_ENV=production ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
          until $(curl --output /dev/null --silent --head --fail http://localhost:2368); do
            echo "waiting for ghostblog container...";
            sleep 4;
          done;
          curl http://localhost:2368 | grep "The professional publishing platform"
          #
          git clone --depth 1 https://github.com/docker-library/official-images.git official-images
          #
          # override config.sh We must bypass UTC timezone test
          cp ./test/config.sh official-images/test/config.sh
          official-images/test/run.sh ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
      -
        name: EDGE | buildx and push all tags (limited to linux/amd64)
        if: github.ref == 'refs/heads/edge'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE_NAME }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.BRANCH_NAME }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: MASTER | buildx and push all tags (using multi-platform)
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE_NAME }}
          # linux/arm/v6 is not part available as fetching packages is unstable
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.BRANCH_NAME }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ghcr.io/${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        name: logs | multi-platform images, docker inspect, history, version, info, uname
        run: |
          docker run --rm mplatform/mquery ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
          docker inspect ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
          docker history ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }} --no-trunc
          docker version
          docker info
          uname -a

  post_build:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set variables when branch equal master
        if: github.ref == 'refs/heads/master'
        run: |
          echo "BRANCH_NAME=stable" >> $GITHUB_ENV
      -
        name: Set variables when branch equal edge
        if: github.ref == 'refs/heads/edge'
        run: |
          echo "BRANCH_NAME=edge" >> $GITHUB_ENV
      -
        name: Set variables | hardcoded
        run: |
          echo "DOCKERFILE_NAME=Dockerfile" >> $GITHUB_ENV
          echo "IMG_NOTI=devmtl/noti:stable" >> $GITHUB_ENV
      -
        name: Set variables | dynamically part#1
        run: |
          echo "APP_NAME=$(cat ${{ env.DOCKERFILE_NAME }} | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ${{ env.DOCKERFILE_NAME }} | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ${{ env.DOCKERFILE_NAME }} | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ${{ env.DOCKERFILE_NAME }} | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          #
          echo "VERSION=$(cat ${{ env.DOCKERFILE_NAME }} | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g')" >> $GITHUB_ENV
          echo "SHORT_HASH_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DATE=$(date -d "-4 hours" "+%Y-%m-%d_%HH%Ms%S")" >> $GITHUB_ENV
      -
        name: Set variables | dynamically part#2
        run: |
          echo "VERSION_CI=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_ci_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
          echo "VERSION_BRANCH=${{ env.BRANCH_NAME }}_${{ env.VERSION }}" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
          echo "VERSION_HASH_DATE=${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}_${{ env.DATE }}" >> $GITHUB_ENV
          echo "DKR_PREFIX=${{ env.DOCKERHUB_USER }}/${{ env.APP_NAME }}" >> $GITHUB_ENV
          echo "GPR_PREFIX=${{ env.GITHUB_ORG }}/${{ env.GITHUB_REGISTRY }}/${{ env.APP_NAME }}" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=${{ env.APP_NAME }}:${{ env.BRANCH_NAME }}_${{ env.VERSION }}_${{ env.SHORT_HASH_COMMIT }}" >> $GITHUB_ENV
      - 
        name: Show variables
        run: |
          echo "${{ env.VERSION_HASH_DATE }} < VERSION_HASH_DATE"
          echo "${{ env.VERSION_HASH_ONLY }} < VERSION_HASH_ONLY"
          echo "${{ env.VERSION_BRANCH }} < VERSION_BRANCH"
          echo "${{ env.VERSION_CI }} < VERSION_CI"
          echo "${{ env.VERSION }} < VERSION"
          echo "${{ env.BRANCH_NAME }} < BRANCH_NAME"
          echo "${{ env._NOTI_MESSAGE }} < _NOTI_MESSAGE"
          echo "${{ env.DKR_PREFIX }} < DKR_PREFIX"
          echo "${{ env.GPR_PREFIX }} < GPR_PREFIX"
          echo "${{ env.SHORT_HASH_COMMIT }} < SHORT_HASH_COMMIT"
          echo "${{ env.DOCKERFILE_NAME }} < DOCKERFILE_NAME"
          echo "${{ env.DOCKERHUB_USER }} < DOCKERHUB_USER"
          echo "${{ env.APP_NAME }} < APP_NAME"
          echo "${{ env.GITHUB_ORG }} < GITHUB_ORG"
          echo "${{ env.GITHUB_REGISTRY }} < GITHUB_REGISTRY"
      -
        name: Send a slack notification
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE='${{ env._NOTI_MESSAGE }}' \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            ${{ env.IMG_NOTI }} sh -c \
              ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
                NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
                noti -k -m "$NOTI_MESSAGE" '
      -
        name: Update README on Dockerhub
        run: |
          docker run --rm \
            -v $(pwd)/README.md:/data/README.md \
            -e DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USER }} \
            -e DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }} \
            -e DOCKERHUB_REPO_PREFIX=${{ env.DOCKERHUB_USER }} \
            -e DOCKERHUB_REPO_NAME=${{ env.APP_NAME }} \
            devmtl/readme-to-dockerhub:stable
      - 
        name: security-audit | Dockle
        run: |
          export DOCKLE_LATEST=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          docker run --rm goodwithtech/dockle:v${DOCKLE_LATEST} ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
      - 
        name: security-audit | Trivy on docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
      - 
        name: security-audit | Trivy on Git repo
        run: |
          export VERSION_TRIVY=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION_TRIVY}/trivy_${VERSION_TRIVY}_Linux-64bit.tar.gz
          tar zxvf trivy_${VERSION_TRIVY}_Linux-64bit.tar.gz
          ./trivy repo https://github.com/firepress-org/ghostfire/
      - 
        name: security-audit Anchore GitHub Advanced Security
        uses: anchore/scan-action@main
        with:
          image: "${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}"
          acs-report-enable: true
      - 
        name: security-audit | Anchore report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

        # uses: actions/upload-artifact@master
        # wip
        # https://github.com/justinribeiro/lighthouse-action/issues/8

        # uses: brpaz/hadolint-action@master
        # wip
        # https://github.com/brpaz/hadolint-action/issues/17

        # Send Github action logs to a PR or commits them
        # I have no idea how to do this at the moment 2020-12-30_11h26

  # post_build_cache:
  # The strategy to save build time on master branch does not work at this point.
  # That's because cache hit occurred on the primary key Linux-buildx-2f94a386b0106b66be4adacf39febfd8eac9dde5, not saving cache.
