sudo: required
language: bash

services:
  - docker

branches:
  except:
    - tmp99

addons:
  apt:
    packages:
      - docker-ce

# Secret DOCKER_PASSWORD managed by Travis:
# See https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings
#
# In a commit, by using [ci skip] it will skip Travis build
#
# THIS_SHA_LONG=$(git log -1 | head -1 | awk '{print $2}')
#
# In the master branch, the GHOST_VERSION is parsed from the Dockerfile https://github.com/firepress-org/ghostfire/blob/master/Dockerfile
# WIP in the followrelease branch, the GHOST_VERSION is parsed from: https://github.com/TryGhost/Ghost/releases
  
before_install:
  - sudo apt-get -qq update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - sudo apt-get install -qqy openssl parallel
  - docker --version

install:
- git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - GHOST_VERSION_DOCKERFILE="$(cat Dockerfile | grep GHOST_VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g')"
  - GHOST_LATEST_RELEASE="$(git ls-remote --tags https://github.com/TryGhost/Ghost.git | cut -d$'\t' -f2 | grep -E '^refs/tags/[0-9]+\.[0-9]+' | cut -d/ -f3 | sort -rV | head -n1)"
  - GHOST_CLI_LATEST_RELEASE="$(git ls-remote --tags https://github.com/TryGhost/Ghost-CLI.git | cut -d$'\t' -f2 | grep -E '^refs/tags/[0-9]+\.[0-9]+' | cut -d/ -f3 | sort -rV | head -n1)"
  - GHOST_VERSION="$GHOST_VERSION_DOCKERFILE"

  - CONTAINER_NAME="ghostuat"
  - DOCKER_USERNAME="devmtl"
  - DOCKER_REPO_NAME="ghostfire"
  - DOCKER_REPO_PREFIX="ghostfire"

  - THIS_DATE=$(date -u +"%Y%m%d_%HH%M%S")
  - THIS_SHA_SHORT=$(git rev-parse --short HEAD)

  - IMAGE_SHA_SHORT="$DOCKER_USERNAME"/"$DOCKER_REPO_NAME":"$GHOST_VERSION"-"$THIS_SHA_SHORT"
  - IMAGE_DATE="$DOCKER_USERNAME"/"$DOCKER_REPO_NAME":"$THIS_DATE"
  - IMAGE_VERSION="$DOCKER_USERNAME"/"$DOCKER_REPO_NAME":"$GHOST_VERSION"

  # This is the one we use in PROD
  - IMAGE_FULL="$DOCKER_USERNAME"/"$DOCKER_REPO_NAME":"$GHOST_VERSION"-"$THIS_SHA_SHORT"-"$THIS_DATE"

script:
  - uname -a;
  - docker build -t "$IMAGE_SHA_SHORT" .
  - docker run -d --name "$CONTAINER_NAME" -p 2368:2368 -e url=http://localhost:2368 -e NODE_ENV=production "$IMAGE_SHA_SHORT"

  - echo "Ensure $CONTAINER_NAME is starting..."
  - until $(curl --output /dev/null --silent --head --fail http://localhost:2368); do
      echo "Waiting for $CONTAINER_NAME container to run...";
      sleep 3;
    done
  - curl http://localhost:2368 | grep "The professional publishing platform"

  - echo "Starting official docker unit test on the image..."
  - ~/official-images/test/run.sh "$IMAGE_SHA_SHORT"

after_script:
  - docker inspect "$CONTAINER_NAME";
  - docker images;
  - docker logs "$CONTAINER_NAME";

  - echo "Starting unit tests within the container..."
  - docker exec -it "$CONTAINER_NAME" uname -a;
  - docker exec -it "$CONTAINER_NAME" node --version;
  - docker exec -it "$CONTAINER_NAME" cat /var/lib/ghost/current/content/themes/casper/package.json | grep version;
  - docker exec -it "$CONTAINER_NAME" cat /var/lib/ghost/current/package.json | grep version;
  - docker exec -it "$CONTAINER_NAME" curl -Is --head "http://localhost:2368" | grep -F -o "HTTP/1.1 200 OK" || echo "Error --> http://localhost:2368"
  - docker rm -f "$CONTAINER_NAME";

  - echo && echo "GHOST_VERSION_DOCKERFILE=$GHOST_VERSION_DOCKERFILE" && echo "GHOST_LATEST_RELEASE=$GHOST_LATEST_RELEASE" && echo "GHOST_CLI_LATEST_RELEASE=$GHOST_CLI_LATEST_RELEASE" && echo "GHOST_VERSION=$GHOST_VERSION" && echo "IMAGE_FULL=$IMAGE_FULL" && echo && echo "IMAGE_SHA_SHORT=$IMAGE_SHA_SHORT" && echo "IMAGE_DATE=$IMAGE_DATE" && echo "IMAGE_VERSION=$IMAGE_VERSION" && echo && echo "#IMAGE_SHA_SHORT=$IMAGE_SHA_SHORT" && echo "#IMAGE_DATE=$IMAGE_DATE" && echo "#IMAGE_VERSION=$IMAGE_VERSION" && echo "#IMAGE_FULL=$IMAGE_FULL";

# docker build -t "$IMAGE_SHA_SHORT" (already built)
after_success:  
  - if [ "$TRAVIS_BRANCH" == "master" ] && [ "$TRAVIS_PULL_REQUEST" = "false" ] && [ "$DOCKER_REPO_PREFIX" != "" ] && [ "$DOCKER_REPO_NAME" != "" ] && [ "$DOCKER_USERNAME" != "" ] && [ "$DOCKER_PASSWORD" != "" ]; then
      echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin

      docker push "$IMAGE_SHA_SHORT";

      docker build -t "$IMAGE_DATE" .;
      docker push "$IMAGE_DATE";

      docker build -t "$IMAGE_VERSION" .;
      docker push "$IMAGE_VERSION";

      docker build -t "$IMAGE_FULL" .;
      docker push "$IMAGE_FULL";
    fi
