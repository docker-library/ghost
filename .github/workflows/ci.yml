name: ci

# ----------------------------------------------
# The beauty of our CI setup is that it will build Dockerfile and set setting variables from the Dockerfile.
# by https://pascalandy.com at https://firepress.org
# GNU v3 https://github.com/firepress-org/ghostfire/blob/master/LICENSE
# ----------------------------------------------

on:
  push:
    branches:
      - 'master'
      - 'edge'
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  schedule:
    - cron: '0 8 * * *'

  workflow_dispatch:

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

# ----------------------------------------------
# PRE_BUILD
# ----------------------------------------------
  pre_build:
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | GitHub Status
        uses: crazy-max/ghaction-github-status@v2
        with:
          overall_threshold: minor
          git_threshold: degraded_performance
          actions_threshold: operational
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      -
        name: Set variables | hardcoded
        run: |
          mkdir -pv ~/varz
          echo "Dockerfile" > ~/varz/DOCKERFILE
        # The way we define our variables is very explicit. It makes it easy to manage CI across different project.
        # Hardcoded vars are:
        #   Dockerfile
      -
        name: EDGE | Set variables
        if: github.ref == 'refs/heads/edge'
        run: |
          echo "edge" > ~/varz/BRANCH_NAME
      -
        name: MASTER | Set variables
        if: github.ref == 'refs/heads/master'
        run: |
          echo "stable" > ~/varz/BRANCH_NAME
      -
        name: Save variables to disk
        run: |
          cat $(cat ~/varz/DOCKERFILE) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/APP_NAME
          cat $(cat ~/varz/DOCKERFILE) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/DOCKERHUB_USER
          cat $(cat ~/varz/DOCKERFILE) | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/GITHUB_ORG
          cat $(cat ~/varz/DOCKERFILE) | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/GITHUB_REGISTRY
          echo "$(cat ~/varz/DOCKERHUB_USER)/$(cat ~/varz/APP_NAME)" > ~/varz/DKR_PREFIX
          echo "ghcr.io/$(cat ~/varz/GITHUB_ORG)/$(cat ~/varz/GITHUB_REGISTRY)/$(cat ~/varz/APP_NAME)" > ~/varz/GPR_PREFIX
          cat $(cat ~/varz/DOCKERFILE) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/VERSION
          git rev-parse --short HEAD > ~/varz/SHORT_HASH_COMMIT
          date "+%Y-%m-%d_%HH%Ms%S" > ~/varz/DATE
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_ci_$(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/VERSION_CI
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)" > ~/varz/VERSION_BRANCH
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_$(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/VERSION_HASH_ONLY
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_$(cat ~/varz/SHORT_HASH_COMMIT)_$(cat ~/varz/DATE)" > ~/varz/VERSION_HASH_DATE
          echo "$(cat ~/varz/APP_NAME):$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_$(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/_NOTI_MESSAGE
      - 
        name: Set ALL variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION=$(cat ~/varz/VERSION)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "SHORT_HASH_COMMIT=$(cat ~/varz/SHORT_HASH_COMMIT)" >> $GITHUB_ENV
          echo "DATE=$(cat ~/varz/DATE)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ~/varz/GITHUB_REGISTRY)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Show variables
        run: |
          echo "${{ env.VERSION_HASH_DATE }} < VERSION_HASH_DATE"
          echo "${{ env.VERSION_HASH_ONLY }} < VERSION_HASH_ONLY"
          echo "${{ env.VERSION_CI }} < VERSION_CI"
          echo "${{ env.VERSION_BRANCH }} < VERSION_BRANCH"
          echo "${{ env.BRANCH_NAME }} < BRANCH_NAME"
          echo "${{ env.VERSION }} < VERSION"
          echo "${{ env.DKR_PREFIX }} < DKR_PREFIX"
          echo "${{ env.GPR_PREFIX }} < GPR_PREFIX"
          echo "${{ env.SHORT_HASH_COMMIT }} < SHORT_HASH_COMMIT"
          echo "${{ env.DATE }} < DATE"
          echo "${{ env.DOCKERFILE }} < DOCKERFILE"
          echo "${{ env.DOCKERHUB_USER }} < DOCKERHUB_USER"
          echo "${{ env.APP_NAME }} < APP_NAME"
          echo "${{ env.GITHUB_ORG }} < GITHUB_ORG"
          echo "${{ env.GITHUB_REGISTRY }} < GITHUB_REGISTRY"
          echo "${{ env._NOTI_MESSAGE }} < _NOTI_MESSAGE"
      - 
        name: Upload variables as artifact
        uses: actions/upload-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz

# ----------------------------------------------
# TEST_BUILD
# ----------------------------------------------
  test_build:
    needs: [pre_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Set QEMU for Multi-platform docker builds
        uses: docker/setup-qemu-action@v1
      - 
        name: EDGE | Set docker Buildx
        if: github.ref == 'refs/heads/edge'
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: "--debug"
      - 
        name: MASTER | Set docker Buildx
        if: github.ref == 'refs/heads/master'
        uses: docker/setup-buildx-action@v1
      -
        name: Set cache docker layers
        id: docker-cache
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: Login to DockerHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - 
        name: Login to GitHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_ORG }}
          password: ${{ secrets.TOKEN_GPR }}
      -
        name: Build and push VERSION_CI tag (limited to ARCH linux/amd64)
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_CI }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - 
        # docker logs --follow --until 2m ghostUAT (TEST is not working yet)
        name: Checkpoint | Wait for container to run
        timeout-minutes: 2
        run: |
          docker run -d --name ghostUAT -p 2368:2368 -e WEB_URL=http://localhost:2368 -e NODE_ENV=production ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
          echo "--- Wait for ghostUAT --->"
          until $(curl --output /dev/null --silent --head --fail http://localhost:2368); do
            echo "--- ghostUAT is starting..."
            sleep 1
          done;
          echo "--- ghostUAT is running! --->"
      -
        name: Checkpoint | docker-library tests
        run: |
          curl http://localhost:2368 | grep "Thoughts, stories and ideas"
          git clone --depth 1 https://github.com/docker-library/official-images.git official-images
          cp ./test/config.sh official-images/test/config.sh
          official-images/test/run.sh ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}
      -
        name: Checkpoint | docker inspect
        run: |
          docker inspect ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }} && echo && echo
      -
        name: Checkpoint | docker history
        run: |
          docker history ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }} --no-trunc && echo && echo
      -
        name: Checkpoint | docker info
        run: |
          docker info
      -
        name: Checkpoint | docker version
        run: |
          docker version
      -
        name: Checkpoint | uname
        run: |
          uname -a

# ----------------------------------------------
# prod_BUILD
    # linux/amd64
    # linux/arm64
    # linux/arm/v8
    # linux/arm/v7
    # linux/arm/v6
    # linux/i386
    # linux/mips64le
    # linux/ppc64le
    # linux/s390x
    # windows/amd64
# ----------------------------------------------
  prod_build:
    needs: [test_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Set QEMU for Multi-platform docker builds
        uses: docker/setup-qemu-action@v1
      - 
        name: EDGE | Set docker Buildx
        if: github.ref == 'refs/heads/edge'
        uses: docker/setup-buildx-action@v1
        with:
          buildkitd-flags: "--debug"
      - 
        name: MASTER | Set docker Buildx
        if: github.ref == 'refs/heads/master'
        uses: docker/setup-buildx-action@v1
      -
        name: Set cache docker layers
        id: docker-cache
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: Login to DockerHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - 
        name: Login to GitHub registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_ORG }}
          password: ${{ secrets.TOKEN_GPR }}
      -
        name: EDGE | buildx and push all tags | limited to linux/amd64
        if: github.ref == 'refs/heads/edge'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE }}
          platforms: |
            linux/amd64
          push: true
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
            ${{ env.GPR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
          #The order for <docker push -tag> matters for our CD down the line.
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      -
        name: MASTER | buildx and push all tags | multi-platforms
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./${{ env.DOCKERFILE }}
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7
            linux/arm/v6
          push: true
          tags: |
            ${{ env.DKR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
            ${{ env.GPR_PREFIX }}:${{ env.BRANCH_NAME }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_BRANCH }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_ONLY }}
            ${{ env.GPR_PREFIX }}:${{ env.VERSION_HASH_DATE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

# ----------------------------------------------
# Tests after test_BUILD
# ----------------------------------------------
  review_dockle:
    needs: [test_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
      - 
        name: Checkpoint | scanner by Dockle
        run: |
          export DOCKLE_LATEST=$(curl --silent "https://api.github.com/repos/goodwithtech/dockle/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          docker run --rm goodwithtech/dockle:v${DOCKLE_LATEST} ${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}

  review_trivy:
    needs: [test_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
      - 
        name: Checkpoint | scanner by Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DKR_PREFIX }}:${{ env.VERSION_CI }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'

  review_linter:
    needs: [test_build]
    runs-on: ubuntu-20.04
    steps:
      - 
        name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - 
        name: Checkpoint | Linter
        continue-on-error: true
        uses: docker://ghcr.io/github/super-linter:slim-v4
        # github/super-linter@v4
        # docker://ghcr.io/github/super-linter:slim-v4
        env:
          VALIDATE_MARKDOWN: false
          DEFAULT_BRANCH: edge
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# ----------------------------------------------
# Tests after prod_BUILD
# ----------------------------------------------
  review_arch:
    needs: [prod_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
      - 
        name: Checkpoint | platform(s)
        if: github.ref == 'refs/heads/edge'
        run: |
          docker run --rm mplatform/mquery ${{ env.DKR_PREFIX }}:${{ env.VERSION_HASH_DATE }}

  update_readme:
    needs: [continuous_deployment]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      - 
        name: Update README on Dockerhub
        run: |
          docker run --rm \
            -v $(pwd)/README.md:/data/README.md \
            -e DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USER }} \
            -e DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }} \
            -e DOCKERHUB_REPO_PREFIX=${{ env.DOCKERHUB_USER }} \
            -e DOCKERHUB_REPO_NAME=${{ env.APP_NAME }} \
            devmtl/readme-to-dockerhub:stable

# ----------------------------------------------
# continuous_deployment after prod_BUILD
# ----------------------------------------------
  continuous_deployment:
    needs: [prod_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: EDGE | Continuous Deployment
        if: github.ref == 'refs/heads/edge'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.NODE1 }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY_ACTIONS }}
          passphrase: ${{ secrets.SSH_KEY_ACTIONS_PASSPHRASE }}
          script: |
            ${{ secrets.SSH_CMD__UPDATE_DKR_IMG_EDGE }}
            hostname
          #sync: true 
          #host: "${{ secrets.NODE1 }},${{ secrets.NODE2 }},${{ secrets.NODE3 }}"
          # alt projet: fifsky/ssh-action@master https://github.com/appleboy/ssh-action/issues/80#issuecomment-759473472
      - 
        name: MASTER | Continuous Deployment
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.NODE1 }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY_ACTIONS }}
          passphrase: ${{ secrets.SSH_KEY_ACTIONS_PASSPHRASE }}
          script: |
            ${{ secrets.SSH_CMD__UPDATE_DKR_IMG_STABLE }}
            hostname

# ----------------------------------------------
# Actions after continuous_deployment
# ----------------------------------------------
  review_lighthouse:
    needs: [continuous_deployment]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Checkpoint | Lighthouse
        uses: treosh/lighthouse-ci-action@7.0.0
        with:
          urls: |
            https://trial.firepress.link/edge/welcome/
            https://trial.firepress.link/edge/tag/getting-started/
          #budgetPath: ./budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

  review_artillery:
    needs: [continuous_deployment]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Checkpoint | Artillery
        id: load-test
        uses: kenju/github-actions-artillery@master
        with:
          filepath: ./.github/load-test.yml
          #            https://trial.firepress.link/edge

  notify_slack:
    needs: [continuous_deployment]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Notify on Slack
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE='${{ env._NOTI_MESSAGE }}' \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            devmtl/noti:stable sh -c \
              ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
                NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
                noti -k -m "$NOTI_MESSAGE" '
