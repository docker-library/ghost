# The beauty of this CI setup is that it will build any valid DOCKERFILE by setting a few variables.
# See how at https://github.com/firepress-org/rclone-in-docker/blob/master/README-CI.md
# Requires secrets on github: DOCKERHUB_PASSWORD, TOKEN_SLACK, TOKEN_GPR
# Update DOCKERFILE_NAME if you are using a special Dockerfile name
# The way we define variables is a hack. See why: https://bit.ly/2ZEAt6u
#
# GNU v3 | Please credit the author if you are re-using some of it :-p
# by Pascal Andy | https://pascalandy.com/blog/now/

name: ci_dockerfile_not_master
on:
  push:
    branches:
      - edge*
      - dev*
      - tmp*
      - temp*
      - patch*
      - pull*
      - test*
      - pascal*
      - bug*
      - pr*
jobs:

  Job1:
    name: Job 1 of 2
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          # Hard coded variable
          echo "Dockerfile" > DOCKERFILE_NAME
          #
          # Logically defined variable from the Dockerfile
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_ORG
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_REGISTRY
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DKR_HUB_URL
          echo "docker.pkg.github.com/$(cat GITHUB_ORG)/$(cat GITHUB_REGISTRY)/$(cat APP_NAME)" > GPR_URL
          date -d "-4 hours" "+%Y-%m-%d_%HH%Ms%S" > DATE_TIME
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          #
          # Three (edge) tags are logically defined
          # for Docker Hub
          echo "$(cat DKR_HUB_URL):edge" > TAG_EDGE
          echo "$(cat DKR_HUB_URL):edge-$(cat VERSION)" > TAG_EDGE_VERSION
          echo "$(cat DKR_HUB_URL):edge-$(cat VERSION)_$(cat DATE_TIME)_$(cat SHORT_COMMIT_HASH)" > TAG_EDGE_VERSION_HASH
          # for Github Package Registry (GPR)
          echo "$(cat GPR_URL):edge" > TAG_EDGE_GPR
          echo "$(cat GPR_URL):edge-$(cat VERSION)" > TAG_EDGE_VERSION_GPR
          echo "$(cat GPR_URL):edge-$(cat VERSION)_$(cat DATE_TIME)_$(cat SHORT_COMMIT_HASH)" > TAG_EDGE_VERSION_HASH_GPR

      - name: Build
        run: |
          # UAT is User Acceptance Testing
          echo "$(cat APP_NAME):uat" > TAG_UAT
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_UAT) .
          # for Docker hub
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE_VERSION) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE_VERSION_HASH) .
          # for GPR
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE_GPR) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE_VERSION_GPR) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_EDGE_VERSION_HASH_GPR) .

      - name: Test image with docker-library
        run: |
          git clone --depth 1 https://github.com/docker-library/official-images.git official-images
          # override config.sh. Why: 1) UTC timezone 2) ghost-basic is configure to check the commit between the image of the official docker image of Ghost.
          cp ./test/config.sh official-images/test/config.sh
          official-images/test/run.sh $(cat TAG_UAT)

      - name: Logs / All tags & variables
        run: |
          echo "Check out https://hub.docker.com/r/$(cat DOCKERHUB_USER)/$(cat APP_NAME)/tags"
          echo " "
          echo "$(cat TAG_EDGE_VERSION_HASH) < TAG_EDGE_VERSION_HASH"
          echo "$(cat TAG_EDGE_VERSION) < TAG_EDGE_VERSION"
          echo "$(cat TAG_EDGE) < TAG_EDGE"
          echo " "
          echo "$(cat TAG_EDGE_VERSION_HASH_GPR) < TAG_EDGE_VERSION_HASH_GPR"
          echo "$(cat TAG_EDGE_VERSION_GPR) < TAG_EDGE_VERSION_GPR"
          echo "$(cat TAG_EDGE_GPR) < TAG_EDGE_GPR"
          echo " "
          echo "$(cat APP_NAME) < APP_NAME"
          echo "$(cat VERSION) < VERSION"
          echo "$(cat DOCKERFILE_NAME) < DOCKERFILE_NAME"
          echo " "
          echo "$(cat DATE_TIME) < DATE_TIME"
          echo "$(cat SHORT_COMMIT_HASH) < SHORT_COMMIT_HASH"
          echo "$(cat DOCKERHUB_USER) < DOCKERHUB_USER"
          echo "$(cat GITHUB_ORG) < GITHUB_ORG"
          echo "$(cat DKR_HUB_URL) < DKR_HUB_URL"
          echo "$(cat GPR_URL) < GPR_URL"
          echo "$(cat GITHUB_REGISTRY) < GITHUB_REGISTRY"

      - name: Logs / docker (inspect, history, version, info), uname
        run: |
          docker inspect $(cat TAG_UAT)
          docker history $(cat TAG_UAT) --no-trunc
          docker version
          docker info
          uname -a

      - name: Publish to Dockerhub
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username $(cat DOCKERHUB_USER) --password-stdin
          docker push $(cat TAG_EDGE)
          docker push $(cat TAG_EDGE_VERSION)
          docker push $(cat TAG_EDGE_VERSION_HASH)

      - name: Publish to GPR
        if: always()
        # As GPR is in beta, it sometimes does not work as expected
        run: |
          echo ${{ secrets.TOKEN_GPR }} | docker login docker.pkg.github.com --username $(cat GITHUB_ORG) --password-stdin
          docker push $(cat TAG_EDGE_GPR)
          docker push $(cat TAG_EDGE_VERSION_GPR)
          docker push $(cat TAG_EDGE_VERSION_HASH_GPR)

  Job2:
    needs: job1
    name: Job 2 of 2
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          echo "Dockerfile" > DOCKERFILE_NAME
          echo "devmtl/noti:stable" > IMG_NOTI
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          echo "$(cat APP_NAME):$(cat VERSION)-edge / $(cat SHORT_COMMIT_HASH)" > NOTI_MESSAGE
          # Tags are logically defined (needed by Aquasec microscanner)
          #echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DKR_HUB_URL
          #echo "$(cat DKR_HUB_URL):latest" > TAG_LATEST

      - name: Push README to dockerhub description
        run: echo "We do this step under the master branch only."

      - name: Notify on Slack
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE="$(cat NOTI_MESSAGE)" \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            $(cat IMG_NOTI) sh -c \
              ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
                NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
                noti -k -m "$NOTI_MESSAGE" '

      - name: Test image with Aquasec microscanner
        run: echo "We do this step under the master branch only."

      #- name: Github Actions ideas to implements
      #  run: |
      #    echo "see â€”> https://gist.github.com/pascalandy/4e499b7c42023836a7d207277923fc09"
